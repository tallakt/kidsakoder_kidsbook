section
  section
    h1 Kidsbook
    h2 Dag 1 - Ruby

    p
        | Laget av Tallak Tveide /
        a<> href='http://twitter.com/tallakt' @tallakt


  section
    p
      | I dag går vi gjennom grunnleggende Ruby og lager noen enkle (og mindre 
      | enkle) script.

    p Du kan hente opp denne presentasjonen på din egen maskin på adressen

    p
      a href="https://tallakt.github.io/kidsakoder_kidsbook/"
        | https://tallakt.github.io/kidsakoder_kidsbook/
  
  section
    h2 Hva er Ruby?
    p
      | Ruby er et 20 år gammelt programmeringsspråk som ble laget av japaneren  
      | Matz (Yukihiro Matsumoto).
    img src="http://shareittips.com/images/Founder-Of-Ruby-Yukihiro-%E2%80%9CMatz%E2%80%9D.jpg" alt="Matz"/
    p Han ville lage et språk for 'programmer happiness'

  section
    h2 Ruby script
    p 
      | For å kjøre et script i filen  
      code <> hello.rb 
      | kan man kjøre kommandoen:

    pre
      code (data-trim class="ruby")
        |
          $ ruby hello.rb
          Hello World!

    p
      | Ruby utfører innholdet i tekstfilen linje for linje.

  section
    h2 Mitt første Ruby program
    p
      | La oss lage et slikt program. Start med å lage en tekstfil som 
      | inneholder teksten: 

    pre
      code (data-trim class="ruby")
        |
          puts "Hello World!"

    p Etter å ha lagret filen kan den kjøres

  section
    h2 Variabler

    p Variable brukes til å lagre verdier

  section
    pre
      code (data-trim class="ruby")
        |
          a = 1
          b = a + 2
          puts b     # Skriver ut 3
          b = 10
          puts b     # Skriver ut 10

  section
    p
      | Variable må begynne med liten bokstav, og ikke inneholde spesielle tegn. 
      | Noen lovlige variabelnavn er:

    p
      code a 
    p
      code tallet 
    p
      code et_viktig_tall 

    p.fragment Det lønner seg å unngå norske bokstaver i variabelnavn

  section
    p 
      | Variable med stor bokstav er konstanter i Ruby. Konstanter 
      | får man ikke endre etter at de først er satt

    pre
      code (data-trim class="ruby")
        |
          VIKTIG_VERDI = 49

    p Konstanter kan ofte gjøre koden lettere å lese


  section
    h2 Verdier 
    p Verdier kan ha forskjellige typer, de vanligste er:

    table
      tbody
        tr
          td Fixnum
          td Hele tall som 1 eller -100
        tr
          td Float
          td Desimaltall som 1.5 og 100.0
        tr
          td String
          td 
            | Tekster, f.eks. 
            code "Ruby er topp!"
        tr
          td Symbol
          td 
            | brukes som nøkler
            code <> :ruby
        tr
          td
            code true 
            | og 
            code false
          td angir sannhet
        tr
          td
            code nil
          td mangel på verdi

  section
    h2 Strenger

    pre
      code (data-trim class="ruby")
        |
          puts "Ruby"      # Skriver Ruby
          puts 'Ruby'      # Skriver også ut Ruby
          a = "Yukihiro"
          b = "Matsumoto"
          puts "\#{a} \#{b}" # Skriver Yukihiro Matsumoto
  section

    pre
      code (data-trim class="ruby")
        |
          a = "Yukihiro"
          b = "Matsumoto"
          puts "\#{a} \#{b}"
    p 
      | Den siste linjen bruker strenginterpolering. Dette er en god måte å sette 
      | sammen verdier til noe man skal skrive ut på skjermen. Men en annen (mindre 
      | elegant) metode ville vært: 

    pre
      code (data-trim class="ruby")
        |
          a = "Yukihiro"
          b = "Matsumoto"
          puts a + " " + b # Skriver også Yukihiro Matsumoto


  section
    h2 Symboler
    p 
      | Symboler brukes mye i Ruby fordi de er så greie

    p.fragment Man kan tenkte at symboler er som strenger

  section
    pre
      code (data-trim class="ruby")
        |
          valg = :ruby
          puts "Hei Java" if valg == :java
          puts "Hei Ruby" if valg == :ruby

    p Koden over vil skrive ut `Hei Ruby`


  section
    h2 Konvertere verdier
    p 
      | Bruker vi `+` må vi passe på at begge verdiene vi skal sette 
      | sammen passer i hop

    pre
      code (data-trim class="ruby")
        |
          1 + "10"    # TypeError: String cant be coerced into Fixnum

  section
    p 
      | Man kan gjøre en streng om til et heltall ved å bruke metoden `to_i`.

    pre
      code (data-trim class="ruby")
        |
          1 + "10".to_i
           => 11

  section
    p Eller kanskje var det dette vi egentlig tenkte?

    pre
      code (data-trim class="ruby")
        |
          1.to_s + "10"       # to_s gjør til streng
           => "110"

  section
    p `to_f` konverterer en streng til et desimaltall:

    pre
      code (data-trim class="ruby")
        |
          1 + "10.5".to_f
           => 11.5


  section
    h2 Computeren vil snakke med deg!
    p
      | `puts` og `gets` er en enkel måte å skrive til skjermen og spørre 
      | brukeren om ting

    pre.fragment
      code (data-trim class="ruby")
        |
          puts "Skriv noe"
          svar = gets
          puts "Du skrev \#{svar}"

    p.fragment `puts` er mye brukt av profesjonelle kodere

  section
    h2 IRB
    p
      | IRB er et nyttig verktøy som følger med Ruby. Her kan du prøve ut Ruby kode 
      | og få resultatet umiddelbart. Du trenger ikke opprette en tekstfil.

  section
    p
      | IRB er fin for eksperimentering!

  section
    pre
      code (data-trim)
        |
          $ irb
          irb(main):001:0> r = "Ruby"
           => "Ruby"
          irb(main):002:0> r.upcase
           => "RUBY"
        
  section
    h2 Noen oppgaver

    ul
      li
        | Lag et script som spør om navnet og hilser tilbake (Hva heter du? Matz. Hei 
        | Matz!)
      li
        | Lag et skript som spør om tre tall og regner ut gjennomsnittet


  section
    h2 Metoder
    p 
      | 
        Alle verdiene i Ruby har metoder. For eksempel har verdien "Ruby" en 
        metode `length` som angir hvor mange tegn den har.

  section
    pre
      code (data-trim class="ruby")
        |
          tekst = "Ruby"
          tekst.length
           => 4
          "Ruby".length
           => 4

  section
    p Hvilke metoder du kan bruke avhenger av hva slags verdi du har

    pre
      code (data-trim class="ruby")
        |
          1.even?
           => false
          "     Matz     ".strip
           => "Matz"
          1.strip
          NoMethodError: undefined method `strip' for 1:Fixnum

  section
    p
      |
        Noen metoder vil trenge ekstra informasjon som parametre

    pre
      code (data-trim class="ruby")
        |
          tall = 16
          tall.div(5)    # Divisjon med hele tall
           => 3

    div.fragment
      p
        |
          I Ruby er det ikke nødvendig å ha parenteser rundt parametrene, dette 
          er også ok:

      pre
        code (data-trim class="ruby")
          |
            tall.div 5
             => 3

  section
    p Flere parametre listes opp adskilt av komma

    pre
      code (data-trim class="ruby")
        |
          tekst = "Ruby"
          tekst.center(30, "_")
           => "_____________Ruby_____________"

  section
    h2 Betingelser
    p Vi bruker `if` til å velge om en kodeblokk skal utføres

    pre
      code (data-trim class="ruby")
        |
          if 1 > 10
            puts "En er større en ti???!? Her er noe galt"
          end

  section
    p
      | Vi kan også legge til en `else` blokk der det trengs

    pre
      code (data-trim class="ruby")
        |
          if 1 > 10
            puts "En er større en ti???!? Her er noe galt"
          else
            puts "En er ikke større en ti, som forventet"
          end

  section
    img src="http://jc00ke.com/speaking/cascadia-ruby-2012-maglev/lib/assets/tenderlove.jpg" alt="@tenderlove"
    p
      | (Vi tar et avbrekk for å hylle Ruby kjendisen Tenderlove)

  section
    h2 Gjentakelse
    p For å gjenta en oppgave kan vi bruke looping. Noen eksempler på dette er:

    pre
      code (data-trim class="ruby")
        |
          10.times do
            puts "Dette skriver jeg ut ti ganger"
          end

  section
    p
      | For å gjenta en kodeblokk til noe blir sant bruker man `while`
    pre
      code (data-trim class="ruby")
        |
          while true do
            puts "Dette skriver jeg ut til jeg går tom for strøm"
          end
  section

    p `while` løkker som aldri skal avbrytes skrives gjerne med `loop` i stedet

    pre
      code (data-trim class="ruby")
        |
          loop do
            puts "Dette skriver jeg ut til jeg går tom for strøm"
          end
          puts "Dette får jeg aldri skrevet ut"


  section
    h2 Oppgave: Gjett det hemmelige tallet

    p
      |
        Skriv et program som lager et tilfeldig tall mellom 0 og 9. Spør brukeren 
        hvilket tall det er, helt til tallet er gjettet. Avslutt med en gratulasjon. 

    p Tips: For å lage tilfeldige tall kan man bruke

    pre
      code (data-trim class="ruby")
        |
          tilfeldig_tall = rand(10)


  section
    h2 Lister

    pre
      code (data-trim class="ruby")
        |
          liste = [1, 2, 3, 4]
          liste.push(5)         # legg til på slutten
           => [1, 2, 3, 4, 5]
          liste.pop             # hent siste element
           => 5
          liste
           => [1, 2, 3, 4]
          liste.shift           # hent første element
           => 1
          liste
           => [2, 3, 4]
          lang_liste = liste + [:a, :b, :c]
           => [2, 3, 4, :a, :b, :c]
          en_tom_liste = []


  section
    p
      | Verdiene i en liste har en indeks som begynner på null. Indeksen kan brukes til 
      | å lese en eller fler verdier.

    pre
      code (data-trim class="ruby")
        |
          liste = [1, 2, 3, 4]
          den_forste = liste[0]
           => 1
          de_tre_forste = liste[0..2]
           => [1, 2, 3]
          den_siste = liste[-1]        # negative indeks telles bakfra
           => 4



  section
    h2 Each

    p
      | 
        En grei måte å gjøre noe med alle verdiene i en liste er å bruke `each` 
        metoden.

  section
    pre
      code (data-trim class="ruby")
        |
          noen_tall = [4, 6, 8, 10]
          sum = 0

          noen_tall.each do |tall|
            sum = sum + tall
          end

          # Når vi kommer hit er sum lik 28

    div.fragment
      pre
        code (data-trim class="ruby")
          |
            sum = (4..10).reject(&:odd?).reduce(&:+)

    p.fragment 
      | (Den siste linjen var en spøk)

  section
    h2 Oppgave: Vi sorterer tall

    p
      | På neste side er det en kodesnutt som sorterer tall som brukeren 
      | skriver inn. Vi skal skrive teksten i en tekstfil og se hva som skjer.

  section
    pre
      code (data-trim class="ruby")
        |
          inntastet = nil
          liste = []

          while inntastet != -1
            puts "Skriv et positivt heltall og avslutt med -1"
            inntastet = gets.to_i
            if inntastet >= 0
              liste.push(inntastet)
            end
          end

      code (data-trim class="ruby")
        |
          sortert = []
          while liste.any?
            minste = liste.min
            liste.delete(minste)
            sortert.push(minste)
          end

          sortert.each do |tall|
            puts tall
          end

  section
    p 
      | Ruby har sortering innebygd
    pre
      code (data-trim class="ruby")
        |
          [2, 5, 6, 3, 6].sort
           => [2, 3, 5, 6, 6] 

  section
    h2 Hash

    p
      | I Ruby er en Hash en tabell hvor man slår opp en verdi utfra en nøkkel

  section
    p
      | Eksempler hvor man ville brukt en hash er:

    ul
      li slå opp et navn utfra et telefonnummer
      li slå opp et telefonnummer utfra et navn
      li en bok med tittel, forfatter og antall sider

  section
    p
      |
        La oss tenke at vi skal lage en søketjeneste som gir telefonnummeret til en  
        person utfra oppgitt navn

    pre
      code (data-trim class="ruby")
        |
          katalog = {}     # start med en tom hash
          katalog["Matz"] = "555-555-5555"
          katalog["Tenderlove"] = "888-888-8888"

    div.fragment
      p Nå kan vi nå slå opp nummer:

      pre
        code (data-trim class="ruby")
          |
            katalog["Matz"]
             => "555-555-5555"
            katalog["Yukihiro Matsumoto"]  # finnes ikke
             => nil

  section
    p
      |
        I en Hash er har hver nøkkel bare en verdi

    pre
      code (data-trim class="ruby")
        |
          katalog = {} 
          katalog["Matz"] = "555-555-5555"
          katalog["Matz"] = "666-666-6666" # denne overskriver tidligere verdi
          katalog["Matz"]
           => "666-666-6666"

  section
    p
      | Vi kan bygge boka opp slik

    pre
      code (data-trim class="ruby")
        |
          bok = {}     # start med en tom hash
          bok[:tittel] = "Pride And Prejudice"
          bok[:forfatter] = "Jane Austen"
          bok[:sideantall] = 397

    p
      | Og så kan vi bruke bok variabelen slik

    pre
      code (data-trim class="ruby")
        |
          t = bok[:tittel]
          f = bok[:forfatter]
          s = bok[:sideantall]
          beskrivelse =  "\#{t} av \#{f}, \#{s} sider"
           => "Pride And Prejudice av Jane Austen, 397 sider"

  section

    p
      | Siden hash blir mye brukt i Ruby, finnes noen enklere måter å skrive 
      | de inn på

  section
    pre
      code (data-trim class="ruby")
        |
          bok = {
            :tittel => "Pride And Prejudice",
            :forfatter => "Jane Austen",
            :sideantall => 397
          }


  section
    pre
      code (data-trim class="ruby")
        |
          bok = {
            tittel: "Pride And Prejudice",
            forfatter: "Jane Austen",
            sideantall: 397
          }

    p (Dette fungerer bare når nøklene er symboler)

  section
    p Det er fullt mulig å kombinere en liste og hasher
    pre
      code (data-trim class="ruby")
        |
          liste = []
          liste.push({twitter: "@matz", land: "Japan"})
          liste.push({twitter: "@tenderlove", land: "USA"})
          liste
           => [
                {:twitter=>"@matz", :land=>"Japan"}, 
                {:twitter=>"@tenderlove", :land=>"USA"}
              ] 
          liste[1][:land]
           => "USA"

  section
    p Som kjent er parenteser valgfrie i Ruby, så denne koden kunne også vært:
    pre
      code (data-trim class="ruby")
        |
          liste = []
          liste.push twitter: "@matz", land: "Japan"
          liste.push twitter: "@tenderlove", land: "USA"
    p De to kodene er helt tilsvarende

  section
    p
      |
        På de neste sidene finner du noen oppgaver. Her kan du velge noe som
        passer

  section
    h2 Oppgave: Yatzy
    p a)
    p
      | Når du starter programmet kaster vi fem terninger. Sjekk om man har 
      | fått hus. Tips: bruk `sort`
    p b)
    p
      | Datamaskinen spiller for tre spillere. Først skal spilleren skrive 
      | inn navnet sitt og så kastes fem terninger. Poengene regnes som 
      | `sjanse` og lagres i en hash med navn som nøkkel og poeng som verdi. 
      | Skriv så ut resultatene. Tips:
    pre
      code (data-trim class="ruby")
        |
          resultater = { ... }
          resultater.each do |navn, poengsum|
            # ...
          end


  section
    h2 Oppgave: Sinus
    p
      | Lag en evig løkke som skriver ut "Matz" som en sinus. Tips: bruk 
      | elementer fra koden nedenfor.
 

    pre
      code (data-trim class="ruby")
        |
          s = Math.sin(0.3)   # Sinus til et tall

          desimaltall = 55.5
          heltall = desimaltall.to_i # runder av til et heltall

          innrykk = 10 * " "
          puts "#\{innrykk}Matz"

  section
    h2 Oppgave: Caesar Cipher (vanskelig)

    p
      |
        Dette er en gammel form for kryptering hvor alle bokstavene blir
        forskjøvet. Man angir nøkkelen, og hver bokstav forskyves så mange
        bokstaver videre. Hvis nøkkelen er 2 vil "A" byttes ut med "C", "B"
        blir til "D", "Y" blir til "A" etc. For å gjøre det enklere støttes
        bare A-Z, tilsammen 26 bokstaver. Dekryptering gjøres ved å kjøre ny
        kryptering med nøkkel 26 - (forrige nøkkel). Programflyt:
    ul
      li Spør om nøkkelen (tall fra 1 til 25)
      li Spør om teksten som skal krypteres
      li Skriv ut den krypterte teksten

    pre
      code (data-trim class="ruby")
        |
          "MATZ".chars
           => ["M", "A", "T", "Z"] 
          ["M", "A", "T", "Z"].join
           => "MATZ"
          "A".next
           => "B"

  section
    h2 Oppgave: Kortspillet Tjue-ett (vanskelig)
    p 
      |
        Spilleren satser en krone og får dobbelt tilbake ved seier. Spilleren
        får to kort og kan velge fler kort eller å stoppe. Banken legger så ut
        kort for kort frem til den har fler poeng enn spilleren eller går over
        21 poeng. I såfall vinner spilleren. Gjenta til spilleren er konkurs.

    p
      |
        For å gjøre det litt enklere kan du anta at det bare finnes kort i en
        farge med verdier fra 1 til 10.


  section
    h2 Oppgave: Mastermind (supervanskelig)
    p
      |
        Implementer spillet mastermind. Datamaskinen sitter med den hemmelige
        løsningen.

    p
      a href="http://en.wikipedia.org/wiki/Mastermind_%28board_game%29"
        | http://en.wikipedia.org/wiki/Mastermind_(board_game)


    



