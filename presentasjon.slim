section
  h1 Kidsbook
  p
    | 
      Laget av Tallak Tveide /
    a<> href='http://twitter.com/tallakt' @tallakt


section
  p Du kan hente opp denne presentasjonen på din egen maskin på adressen

  p
    a href="http://tallakt.github.io/kidsakoder_kidsbook/"
      | http://tallakt.github.io/kidsakoder_kidsbook/

section
  section
    h1 Forberedelser

    p
      |
        Før første kursdag er det noen ting som du gjerne kan forsøke å løse på
        egenhånd for å spare tid.

  section
    p
      |
        Du kan ta med din egen bærbare datamaskin. Om den kjører Windows, Mac OS X
        eller Linux betyr lite. 
    p
      |
        Om du vil så vil det være maskiner på kurset du kan låne.

  section
    h2 Installere Ruby

    p 
      |
        Har du Mac OS X eller Linux er det sannsynlig at Ruby allerede er
        installert på maskinen din. Du kan sjekke dette med kommandoen:

    pre
      | 
        $ ruby --version
        ruby 2.2.0p0 (2014-12-25 revision 49005) [i686-linux]
    p
      | 
        Hint: Du skal ikke skrive $ tegnet, denne angir hvor du skal skrive
        dine kommandoer.

  section
    p
      |
        Om du ikke har Ruby finner du det på 
      a href="http://ruby-lang.org"
        | http://ruby-lang.org
      | . Du kan bruke en versjon som er 1.8.7 eller nyere.


    p
      |
        På Windows anbefaler vi å velge 'Add Ruby to Path' under installajonen.

  section
    p
      |
        Om du har problemer med å installere Ruby får du hjelp på kurset.


  section
    p
      |
        For å skrive programfiler bruker vi en tekst editor. Noen gratis
        anbefalinger: 

    ul
      li
        a href="http://atom.io/"
          | Atom editor
      li
        a href="http://macromates.com/"
          | Textmate (for Mac OS X)
      li
        a href="http://notepad-plus-plus.org/"
          | Notepad++ (for Windows)

    p
      |
        Vim og Emacs er to veldig avanserte editorer som brukes mye av
        profesjonelle. Hvis du allerede bruker en av disse er det ok.


  section
    p
      |
        Ta helst med en USB minnebrikke på kurset slik at du kan ta en kopi av
        filene dine når du reiser hjem for dagen.

    p
      | Hvis du har (eller registrerer) en gratis konto på 
      a href="http://github.com"
        | GitHub
      |  
         er det mulig å legge koden din der. Vi hjelper i såfall til om
        nødvendig.
        
    p Vel møtt!


section
  section
    h1 Dag 1 - Ruby

    p
      | I dag går vi gjennom grunnleggende Ruby og lager noen enkle (og mindre 
      | enkle) script.

  section
    h2 Hva er Ruby?
    p
      | Ruby er et 20 år gammelt programmeringsspråk som ble laget av japaneren  
      | Matz (Yukihiro Matsumoto).
    img src="http://shareittips.com/images/Founder-Of-Ruby-Yukihiro-%E2%80%9CMatz%E2%80%9D.jpg" alt="Matz"/
    p Han ville lage et språk som gjorde programmering gøy

  section
    p
      |
        Ruby er likevel et språk som kan brukes til mye. Twitter er det mest
        kjente nettstedet som har brukt Ruby. De brukte det til å lage hele
        hjemmesiden sin

  section
    h2 Ruby script
    p 
      | 
        Ruby tar en tekstfil og utfører kommandoer linje for linje.
    div.fragment
      p Hvis vi har en tekstfil med
      pre: code (data-trim class="ruby")
        |
          # i filen hello.rb
          puts "Hello World!"

      p Når vi kjører den får vi
      pre: code (data-trim class="ruby")
        |
          $ ruby hello.rb
          Hello World!



  section
    h2 Hello Ruby
    p
      | 
        Vi skal lage et slikt program

    h3 Windows
    p
      | Lag en mappe som heter
      code <> c:\min_ruby

    h3 Mac OS X og Linux
    p
      | Lag en mappe
      code <> min_ruby 
      | i hjemmekatalogen din.

  section
    div
      p Åpne tekst editoren og skriv:

      pre
        code (data-trim class="ruby")
          |
            puts "Hello World!"

      p 
        | Lagre filen i katalogen din med navnet
        code <> hello.rb



  section
    p
      |
        Ruby script kjører vi vanligvis i et terminalvindu.

    h3 Windows

    p
      |
        Trykk på start knappen, så `Run...` og skriver `cmd`. For å endre
        katalog og kjøre scriptet ditt skriver du


    pre: code
      |
        c:\Program Files> cd c:\min_ruby
        c:\min_ruby> ruby hello.rb

    h3 Mac OS X og Linux
    p
      |
        Kjør `Terminal` og skriv:

    pre: code 
      |
        $ cd ~/min_ruby
        $ ruby hello.rb


  section
    h2 Variabler

    p Variable brukes til å lagre verdier

  section
    pre
      code (data-trim class="ruby")
        |
          a = 1
          b = a + 2
          puts b     # Skriver ut 3
          b = 10     # her setter vi b på nytt
          puts b     # Skriver ut 10

  section
    p
      | Variable må begynne med liten bokstav, og ikke inneholde spesielle tegn. 
      | Noen lovlige variabelnavn er:

    p
      code a 
    p
      code tallet 
    p
      code svar5
    p
      code et_viktig_tall 

    p.fragment Det lønner seg å unngå norske bokstaver i variabelnavn

  section
    p 
      | Variable med STORE BOKSTAVER er konstanter i Ruby. Konstanter 
      | får man ikke endre etter at de først er satt

    pre
      code (data-trim class="ruby")
        |
          MENINGEN_MED_LIVET_OG_ALT = 42

    p Konstanter kan ofte gjøre koden lettere å lese


  section
    h2 Verdier 
    p Verdier kan ha forskjellige typer, de vanligste er:

    table
      tbody
        tr
          td Fixnum
          td Hele tall som 1 eller -100
        tr
          td Float
          td Desimaltall som 1.5 og 100.0
        tr
          td String
          td 
            | Tekster, f.eks. 
            code "Ruby er topp!"
        tr
          td Symbol
          td 
            | brukes som nøkler
            code <> :ruby
        tr
          td
            code true 
            | og 
            code false
          td angir sannhet
        tr
          td
            code nil
          td mangel på verdi

  section
    h2 Strenger

    pre
      code (data-trim class="ruby")
        |
          puts "Ruby"      # Skriver Ruby
          puts 'Ruby'      # Skriver også ut Ruby
          a = "Yukihiro"
          b = "Matsumoto"
          puts "\#{a} \#{b}" # Skriver Yukihiro Matsumoto
  section

    pre
      code (data-trim class="ruby")
        |
          a = "Yukihiro"
          b = "Matsumoto"
          puts "\#{a} \#{b}"
    p 
      | 
        På den siste linjen vises en fin måte å sette verdier sammen til en
        streng. Du kunne også gjort 

    pre
      code (data-trim class="ruby")
        |
          a = "Yukihiro"
          b = "Matsumoto"
          puts a + " " + b # Skriver også Yukihiro Matsumoto


  section
    h2 Symboler
    p 
      | Symboler brukes mye i Ruby fordi de er så greie

    p.fragment Man kan tenkte at symboler er som strenger

  section
    pre
      code (data-trim class="ruby")
        |
          valg = :ruby
          puts "Hei Java" if valg == :java
          puts "Hei Ruby" if valg == :ruby

    p Koden over vil skrive ut `Hei Ruby`


  section
    h2 Konvertere verdier
    p 
      | Bruker vi `+` må vi passe på at begge verdiene vi skal sette 
      | sammen passer i hop

    pre
      code (data-trim class="ruby")
        |
          1 + "10"    # TypeError: String cant be coerced into Fixnum

  section
    p 
      | Man kan gjøre en streng om til et heltall med `to_i`.

    pre
      code (data-trim class="ruby")
        |
          1 + "10".to_i
           => 11

  section
    p Eller motsatt, et heltall til en streng med `to_s`

    pre
      code (data-trim class="ruby")
        |
          1.to_s + "10"       # to_s gjør til streng
           => "110"

  section
    p `to_f` konverterer en streng til et desimaltall:

    pre
      code (data-trim class="ruby")
        |
          1 + "10.5".to_f
           => 11.5


  section
    h2 Computeren vil snakke med deg!
    p
      | `puts` og `gets` er en enkel måte å skrive til skjermen og spørre 
      | brukeren om ting

    pre.fragment
      code (data-trim class="ruby")
        |
          puts "Skriv noe"
          svar = gets
          puts "Du skrev \#{svar}"

    p.fragment `puts` er mye brukt av profesjonelle kodere

  section
    h2 IRB
    p
      | IRB er et nyttig verktøy som følger med Ruby. Her kan du prøve ut Ruby kode 
      | og få resultatet umiddelbart. Du trenger ikke opprette en tekstfil.

  section
    p
      | IRB er fin for eksperimentering!

  section
    pre
      code (data-trim)
        |
          $ irb
          irb(main):001:0> r = "Ruby"
           => "Ruby"
          irb(main):002:0> r.upcase
           => "RUBY"
        
  section
    h2 Noen oppgaver

    ul
      li
        | Lag et script som spør om navnet og hilser tilbake (Hva heter du? Matz. Hei 
        | Matz!)
      li
        | Lag et skript som spør om tre tall og regner ut gjennomsnittet


  section
    h2 Metoder
    p 
      | 
        Alle verdiene i Ruby har metoder. For eksempel har verdien "Ruby" en 
        metode `length` som angir hvor mange tegn den har.

  section
    pre
      code (data-trim class="ruby")
        |
          tekst = "Ruby"
          tekst.length
           => 4
          "Ruby".length
           => 4

  section
    p Forskjellig type verdier har forskjellige metoder

    pre
      code (data-trim class="ruby")
        |
          -100.abs
           => 100
          "     Matz     ".strip
           => "Matz"
          -100.strip
          NoMethodError: undefined method `strip' for -100:Fixnum

  section
    p
      |
        Noen metoder vil trenge ekstra informasjon som parametre

    pre
      code (data-trim class="ruby")
        |
          tall = 16
          tall.div(5)    # Divisjon med hele tall
           => 3

    div.fragment
      p
        |
          I Ruby er det ikke nødvendig å ha parenteser rundt parametrene, dette 
          er også ok:

      pre
        code (data-trim class="ruby")
          |
            tall.div 5
             => 3

  section
    p Flere parametre listes opp adskilt av komma

    pre
      code (data-trim class="ruby")
        |
          tekst = "Ruby"
          tekst.center(30, "_")
           => "_____________Ruby_____________"

  section
    h2 Betingelser
    p Vi bruker `if` til å velge om en kodeblokk skal utføres

    pre
      code (data-trim class="ruby")
        |
          verdi = 1
          if verdi > 10
            puts "En er større enn ti? Her er noe galt"
          end

  section
    p
      | Vi kan også legge til en `else` blokk der det trengs

    pre
      code (data-trim class="ruby")
        |
          verdi = 1
          if verdi > 10
            puts "En er større enn ti? Her er noe galt"
          else
            puts "En er ikke større en ti, som forventet"
          end

  section
    img src="http://jc00ke.com/speaking/cascadia-ruby-2012-maglev/lib/assets/tenderlove.jpg" alt="@tenderlove"

  section
    h2 Gjentakelse
    p For å gjenta en oppgave kan vi bruke løkker

    pre
      code (data-trim class="ruby")
        |
          10.times do |n|
            puts "Dette er linje \#{n}"
          end

  section
    p
      | For å gjenta en kodeblokk til noe blir sant bruker man `while`
    pre
      code (data-trim class="ruby")
        |
          inntastet = 0
          while inntastet != 5 do
            puts "Skriv et tall, 5 for å avslutte"
            inntastet = gets.to_i
          end

  section
    h2 Oppgave: De ti navnene

    p
      |
        Lag et program som skriver ut ti linjer. De første fem er fornavnet
        ditt, de siste fem er etternavnet.  

  section
    h2 Oppgave: Gjett det hemmelige tallet

    p
      |
        Skriv et program som lager et tilfeldig tall mellom 0 og 9. Spør brukeren 
        hvilket tall det er, helt til tallet er gjettet. Avslutt med en gratulasjon. 

    p Tips: For å lage tilfeldige tall kan man bruke

    pre
      code (data-trim class="ruby")
        |
          tilfeldig_tall = rand(0..9)

          svart_tall = gets.to_i

  section
    h2 Lister

    pre
      code (data-trim class="ruby")
        |
          liste = [1, 2, 3, 4]
          liste.push(5)         # legg til på slutten
           => [1, 2, 3, 4, 5]
          liste.pop             # hent siste element
           => 5
          liste
           => [1, 2, 3, 4]
          liste.shift           # hent første element
           => 1
          liste
           => [2, 3, 4]
          lang_liste = liste + [:a, :b, :c]
           => [2, 3, 4, :a, :b, :c]
          en_tom_liste = []


  section
    p
      | Verdiene i en liste har en indeks som begynner på null. Indeksen kan brukes til 
      | å lese en eller fler verdier.

    pre
      code (data-trim class="ruby")
        |
          liste = [1, 2, 3, 4]
          den_forste = liste[0]
           => 1
          de_tre_forste = liste[0..2]
           => [1, 2, 3]



  section
    h2 Each

    p
      | 
        En grei måte å gjøre noe med alle verdiene i en liste er å bruke `each` 
        metoden.

  section
    pre
      code (data-trim class="ruby")
        |
          noen_tall = [4, 6, 8, 10]
          sum = 0

          noen_tall.each do |tall|
            sum = sum + tall
          end

          # Når vi kommer hit er sum lik 28

  section
    h2 Oppgave: Vi sorterer tall

    p
      | 
        På neste side er det en kodesnutt som sorterer tall brukeren skriver
        inn. Kopier eller skriv av koden inn i en ruby fil som du kjører. Se om
        du kan finne ut hva hver linje gjør

  section
    pre
      code (data-trim class="ruby")
        |
          # nulltiling av variable
          inntastet = nil
          liste = []

          # vi spør brukeren om tall, og legger de til listen vår
          while inntastet != -1
            puts "Skriv et positivt heltall og avslutt med -1"
            inntastet = gets.to_i
            if inntastet >= 0
              liste.push(inntastet)
            end
          end

      code (data-trim class="ruby")
        |
          # vi lager en sortert liste ved å ta ut den minste verdien
          sortert = []
          while liste.any?
            minste = liste.min
            liste.delete(minste)
            sortert.push(minste)
          end

          # skriv ut resultatet
          sortert.each do |tall|
            puts tall
          end

  section
    p 
      | Ruby har sortering innebygd
    pre
      code (data-trim class="ruby")
        |
          [2, 5, 6, 3, 6].sort
           => [2, 3, 5, 6, 6] 

  section
    h2 Hash

    p
      | I Ruby er en hash en tabell hvor man slår opp en verdi utfra en nøkkel

  section
    p
      | Eksempler hvor man ville brukt en hash er:

    ul
      li en telefonkatalog
      li en bok med tittel, forfatter og antall sider


    p.fragment
      br/
      |
        En hash kan minne veldig om en vegg med bankbokser. En nøkkel gir
        adgang til innholdet i den ene boksen.

  section
    p
      |
        Eksempel 1: Telefonkatalogen. Nøkkelen i hashen vår er navnet, verdien er
        telefonnummeret

    pre
      code (data-trim class="ruby")
        |
          katalog = {}     # start med en tom hash
          katalog["Matz"] = "555-555-5555"
          katalog["Tenderlove"] = "888-888-8888"

    div.fragment
      p Når vi senere skal slå opp et nummer gjør vi:

      pre
        code (data-trim class="ruby")
          |
            katalog["Matz"]
             => "555-555-5555"
            katalog["Yukihiro Matsumoto"]  # finnes ikke
             => nil

  section
    p
      |
        I en hash er har hver nøkkel bare en verdi

    pre
      code (data-trim class="ruby")
        |
          katalog = {} 
          katalog["Matz"] = "555-555-5555"
          katalog["Matz"] = "666-666-6666" # denne overskriver 555-555-5555
          katalog["Matz"]
           => "666-666-6666"

  section
    p
      |
        Eksempel 2: Lagre bok informasjon

    pre
      code (data-trim class="ruby")
        |
          bok = {}     # start med en tom hash
          bok[:tittel] = "Ready Player One"
          bok[:forfatter] = "Ernest Cline"
          bok[:sider] = 384

    p
      | Og så kan vi bruke bok variabelen slik

    pre
      code (data-trim class="ruby")
        |
          t = bok[:tittel]
          f = bok[:forfatter]
          s = bok[:sider]
          beskrivelse =  "\#{t} av \#{f}, \#{s} sider"
           => "Ready Player One av Ernest Cline, 384 sider"

  section
    p
      |
        Legg merke til at telefonkatalogen har mange nøkler, mens boken vår har
        noen få faste nøkler 

  section

    p
      | Siden hash blir mye brukt i Ruby, finnes noen enklere måter å skrive 
      | de inn på

    pre
      code (data-trim class="ruby")
        |
          bok = {
            :tittel => "Ready Player One",
            :forfatter => "Ernest Cline",
            :sideantall => 384
          }


  section
    pre
      code (data-trim class="ruby")
        |
          bok = {
            tittel: "Ready Player One",
            forfatter: "Ernest Cline",
            sideantall: 384
          }

  section
    p Det er fullt mulig å kombinere en liste og hasher
    pre
      code (data-trim class="ruby")
        |
          liste = []
          liste.push({twitter: "matz", land: "Japan"})
          liste.push({twitter: "tenderlove", land: "USA"})
          liste
           => [
                {:twitter=>"matz", :land=>"Japan"}, 
                {:twitter=>"tenderlove", :land=>"USA"}
              ] 
          liste[1][:land]
           => "USA"

  section
    p
      |
        Lister med hasher er ganske kompleks programmering. Det er ok hvis du
        ikke skjønner det med en gang.

  section
    p
      |
        På de neste sidene finner du noen oppgaver. Her kan du velge noe som
        passer

  section
    h2 Oppgave: Stein Saks Papir
    p
      |
        Les et tall fra brukeren. Stein saks papir er som for listen under.
        Datamaskinen velger så et tilfeldig valg. Angi hvem som vant, eller
        spill en ny runde hvis det ble uavgjort. 

    table
      tbody
        tr
          td 1
          td Stein
        tr
          td 2
          td Saks
        tr
          td 3
          td Papir

    p Tips:

    pre
      code (data-trim class="ruby")
        |
          tilfeldig_tall = rand(1..3)

          if tilfeldig_tall == 1 then
            # kode her
          end



  section
    h2 Oppgave: Yatzy - Har vi fått hus?
    p
      | 
        Når du starter programmet kaster vi fem terninger. Sjekk om man har
        fått hus. Tips: legg terningkastene i en liste og bruk `liste.sort`. Vi
        skal da enten ha 3+2 like eller 2+3 like.

  section
    h2 Oppgave: To terninger sammen
    p
      | 
        La datamaskinen kaste to terninger hundre ganger. Pluss sammen antall
        øyne for hvert kast. Lagre summen i en hash med sum som nøkkel og
        antall kast som verdi. Skriv ut resultatene. Tips: 

    pre
      code (data-trim class="ruby")
        |
          tellere = {}

          # Initialiser hash med null
          (2..12).each do |sum|
            tellere[sum] = 0
          end

          # kast to terninger og øk teller
          sum = rand(1..6) + rand(1..6)
          tellere[sum] = tellere[sum] + 1

        
  section
    h2 Oppgave: Sinus
    p
      | Lag en evig løkke som skriver ut "Matz" som en sinus. Tips: bruk 
      | elementer fra koden nedenfor.
 

    pre
      code (data-trim class="ruby")
        |
          s = Math.sin(0.3)   # Sinus til et tall

          desimaltall = 55.5
          heltall = desimaltall.to_i # runder av til et heltall

          innrykk = 10 * " "
          puts "\#{innrykk}Matz"

          # evig løkke
          loop do
            # kode her
          end

  section
    h2 Oppgave: Caesar Cipher (vanskelig)

    p
      |
        Dette er en gammel form for kryptering hvor alle bokstavene blir
        forskjøvet. Man angir nøkkelen, og hver bokstav forskyves så mange
        bokstaver videre. Hvis nøkkelen er 2 vil "A" byttes ut med "C", "B"
        blir til "D", "Y" blir til "A" etc. For å gjøre det enklere støttes
        bare A-Z, tilsammen 26 bokstaver. Dekryptering gjøres ved å kjøre ny
        kryptering med nøkkel 26 - (forrige nøkkel). (Hjelpekode på neste side)
        Programflyt:
    ul
      li Spør om nøkkelen (tall fra 1 til 25)
      li Spør om teksten som skal krypteres
      li Skriv ut den krypterte teksten

  section
    pre
      code (data-trim class="ruby")
        |
          "MATZ".chars
           => ["M", "A", "T", "Z"] 
          ["M", "A", "T", "Z"].join
           => "MATZ"
          "A".next
           => "B"


  section
    h2 Oppgave: Mastermind (supervanskelig)
    p
      |
        Implementer spillet mastermind. Datamaskinen sitter med den hemmelige
        løsningen. Tips: Når brukeren skal gi svar kan han ha en bokstav per
        farge, og skrive fire bokstaver. Programmet svarer så med hvor mange
        som var riktig farge på riktig sted, og hvor mange som var riktig farge på
        feil sted.



    table
      tbody
        tr
          td G
          td R
          td U
          td L
          td H
          td S
        tr
          td Grønn
          td Rød
          td Gul
          td Lilla
          td Hvit
          td Sort

    pre
      code (data-trim class="ruby")
        |
          # lage datamaskinens hemmelige løsning
          FARGER = ["G", "R", "U", "L", "H", "S"]
          losning = []
          4.times do
            indeks = random(0..5)
            losning.push(FARGER[indeks])
          end
    p
      a href="http://en.wikipedia.org/wiki/Mastermind_%28board_game%29" target="_top"
        | http://en.wikipedia.org/wiki/Mastermind_(board_game)



section
  section
    h1 Dag 2 - Filer

    p
      |
        I dag skal vi skrive til filer og kikke litt på å lage egne funksjoner.
        Vi skal lage et bibliotek som skal brukes som en komponent i den
        endelige Kidsbook siden

  section
    h2 Filer

    pre
      code (data-trim class="ruby")
        |
          # Åpne en fil for skriving
          File.open("min_fil.txt", "w") do |fil|
            fil.puts "A"
            fil.puts "B"
          end

          # Åpne samme fil for å lese tilbake
          File.open("min_fil.txt") do |fil|
            while not fil.eof?               # `eof?` angir end-of-file
              puts fil.gets
            end
          end

    div.fragment

      p Slik ser det omtrent ut hvis vi kjører scriptet

      pre
          |
            $ ruby lese_og_skrive_til_fil.rb
            A
            B


  section
    p
      |
        Filer er den måten en datamaskin kan lagre data mellom hver gang den
        startes på nytt. Filen legger seg på datamaskinens harddisk. Slike
        filer kan man åpne og lese i teksteditoren din.

  section
    h2 Oppgave: lagre data man skriver inn

    p
      |
        a) Lag et script som henter inn tre tall med `gets` og skriver dem
        ut til en fil
    p
      |
        b) Lag et script for å lese tallene i filen og skriv ut summen
    p
      |
        c) Hent filen opp i en tekst editor
  

  section
    p
      |
        En tekstfil inneholder alle bokstaver adskilt av linjeskift tegnet.
        Dette tegnet vises som strengen
      code <> "\n"

    p
      |
        Når vi leser linjer i en fil får vi tilbake disse tegnene også. Det
        er vår jobb å fjerne dem fra strengene
    
  section
    pre
      code (data-trim class="ruby")
        |
          innhold = File.read("min_fil.txt") # leser alt i et jafs
          linjer = innhold.each_line         # splitter opp linjene
          forste_linje = linjer.first
           => "A\n"
          forste_linje.strip
           => "A"

  section
    p Noen ganger må vi ha en plan B om filen ikke finnes
    pre
      code (data-trim class="ruby")
        |
          filnavn = "min_fil.txt"
          verdi = nil
          if File.exist?(filnavn)
            verdi = File.read(filnavn)
          else
            verdi = "HELT TOMT"
          end
  section
    h2 YAML
    p
      |
        Å lese filer linje for linje er ganske slitsomt. YAML er en måte å
        gjøre variable i Ruby om til tekst og tilbake. Denne teksten kan
        vi skrive til en fil.

  section
    p
      |
        YAML lar oss skrive en Ruby verdi til fil og lese den tilbake i samme
        form. Dette er spesielt hendig hvis verdien er en liste eller en hash.

  section
    pre
      code (data-trim class="ruby")
        |
          require 'yaml'

          yaml1 = 5.to_yaml 
          yaml2 = [1, 2, 3].to_yaml 

    p yaml1 inneholder

    pre
      |
        --- 5
        ...

    p yaml2 inneholder
    
    pre
      |
        ---
        - 1
        - 2
        - 3

  section

    p
      |
        Setter vi sammen filer og YAML får vi da

    pre
      code (data-trim class="ruby")
        |
          require 'yaml'

          # dataene vi vil skriv og lese
          # vi har med vilje valgt en kompleks struktur
          data = [ {navn: "Matz", land: "Japan"}, 
                   {navn: "Tenderlove", land: "USA"} ]

          # Skriv data til fil
          File.open("mine_data.yml", "w") do |fil|
            fil.write data.to_yaml
          end

          # Les tilbake fra filen
          data_som_tekst = File.read("mine_data.yml")
          leste_data = YAML.load(data_som_tekst)
           => [ {navn: "Matz", land: "Japan"}, 
                {navn: "Tenderlove", land: "USA"} ]

  section
    p En fordel med YAML er at man kan redigere den for hånd om det trengs

  section
    h2 Oppgave: YAML
    p 
      |
        I forrige oppgave fikk vi tall fra brukeren som vi skrev til ewn fil.
        Skriv om forrige oppgave til å lagre og lese dataene som YAML fil
    p 
      |
        Åpne YAML filen i teksteditoren. Forsøk å endre dataene og kjør
        lesescriptet på nytt

  section
    p
      |
        Til nå har vi laget script som kjører fra A til Å. Større programmer
        krever litt mer organisering. Dette skal vi nå kikke litt på.

  section
    h2 Funksjoner
    p La oss definere en funksjon som dobler parameteret sitt

    pre
      code (data-trim class="ruby")
        |
          def dobbelt_av(x)
            x + x
          end

          dobbelt_av(10)
           => 20
          dobbelt_av(3)
           => 6
          dobbelt_av("Matz")
           => "MatzMatz"

  section
    p
      |
        Funksjonen gir tilbake resultatet fra siste linje som ble kjørt


  section
    pre
      code (data-trim class="ruby")
        |
          def er_tallet_stort(tall)
            if tall > 1000
              true
            else
              false
            end
          end

          er_tallet_stort(50)
           => false
          er_tallet_stort(50000)
           => true


  section
    p
      |
        Funksjoner er en fin måte å dele scriptet opp i logiske biter. I større
        script er det vanlig at funksjoner igjen kaller andre funksjoner

  section
    pre
      code (data-trim class="ruby")
        |
          def dobbel(x)
            x + x
          end

          def lag_dobbel_liste(a, b, c)
            [dobbel(a), dobbel(b), dobbel(c)]
          end

          lag_dobbel_liste(1, 2, 3)
           => [2, 4, 6]
          
  section
    p
      | 
        Vi skal nå lage et litt større script der brukeren kan skrive innlegg
        signert med navn, og disse blir lagret til fil


  section
    p
      | 
        Lag scriptet slik at den har tre deler

    ul
      li En funksjon som skriver en liste av innlegg til fil
      li En funksjon som leser innleggene tilbake
      li En kodebit som snakker med brukeren og kaller de to funksjonene

    p
      br/
      |
        Vi lagrer hvert innlegg som en hash, og innleggene som liste
    pre
      code (data-trim class="ruby")
        |
          ny_tekst = ...     # fra brukeren
          ny_avsender = ...  # fra brukeren

          nytt_innlegg = {
            :tekst => ny_tekst,
            :avsender => ny_avsender
          }

          alle_innlegg.push(nytt_innlegg)

  section
    p
      |
        Når vi starter scriptet skjer dette:
    ul
      li vi spør om avsenders navn og teksten til det nye innlegget
      li dette blir lagret i en variabel som en hash
      li vi leser tilbake eldre innlegg fra fil
      li hvis filen ikke finnes skal vi bruke en tom liste i stedet
      li vi legger det nye innlegget til på slutten av listen
      li vi lagrer den oppdaterte listen tilbake til filen
      li vi skriver ut alle innleggene

    p.fragment
      br/
      |
        Se hvor langt du kommer på egenhånd før du kikker på 
      a href="http://github.com/tallakt/kidsakoder_kidsbook/blob/master/kode/ferdig/innlegg.rb" target="_top"
        | løsningsforslaget

  section
    h2 Splitte scriptet i filer
    p 
      |
        På et tidspunkt blir script filen så stor at vi begynner å miste
        oversikten. Da er det på tide å splitte den i flere filer. For å bruke
        en fil i en annen bruker vi `require_relative`

  section
    pre
      code (data-trim class="ruby")
        |
          # Fil: dobbel.rb
          def dobbel(x)
            x + x
          end

      code (data-trim class="ruby")
        |
          # Fil: hoved.rb
          require_relative 'dobbel'  # obs! .rb er fjernet fra navnet

          puts(dobbel(15)) # skriver ut 30
          
  section
    h2 Oppgave: et bibliotek

    p
      |
        Vi skal splitte scriptet fra forrige oppgave inn i to. I den ene delen
        har vi de to funksjonene, og resten i den andre. 
      a<> href="http://github.com/tallakt/kidsakoder_kidsbook/tree/master/kode/dag_2/bibliotek" target="_top"
        | Løsningsforslag her.

  section
    p
      |
        På de neste sidene finner du noen oppgaver hvor du kan velge de som er
        mest interessante, eller lage egne vrier

  section
    h2 Oppgave: Anagrammer
    p
      | 
        På   
      a<> href="http://www2.scrabbleforbundet.no/wp-content/uploads/2012/07/NSF-ordlisten.zip" 
        | denne linken
      |
        fra Norsk Scrabble Forbund finnes en tekstfil med norske ord. Filen ser omtrent lik ut:

    pre
      |
        ACTINIUMENE subst
        ACTINIUMET subst
        ACTION subs

    p
      |
        Lag et program som spør om et ord og så finner anagrammer for det
        (ord med samme bokstaver i en annen rekkefølge). Tips på neste side.


  section
    pre
      code (data-trim class="ruby")
        |
          "ACTINIUMENE subst".split
           => ["ACTINIUMENE", "subst"] 

      code (data-trim class="ruby")
        |
          # BEINET og BITENE er anagrammer
          "BEINET".chars.sort.join
           => "BEEINT"
          "BITENE".chars.sort.join
           => "BEEINT"

      code (data-trim class="ruby")
        |
          # pass på at det brukeren skriver blir likt med bokstavene i ordlisten
          # Fjern blanke tegn og gjør til store bokstaver
          inntastet = gets.strip.upcase

  section
    h2 Oppgave: Kriminalitet (vanskelig)

    p
      |
        På hjemmesiden til The District of Columbia finnes en oversikt over 
      a href="http://data.octo.dc.gov/feeds/crime_incidents/archive/crime_incidents_2013_CSV.zip"
        | alle lovbrudd som er begått i 2013
      |
        . Lag en oversikt over hvor mange lovbrudd som er gjort av hver type
        (fjerde verdi) og skriv det ut som en tabell. Bonusoppgave: Finn ut
        hvilken type kriminalitet som skjedde hyppigst for hver klokketime

    pre
      code (data-trim class="ruby")
        |
          "A,B,C,D,E".split(",")
           => ["A", "B", "C", "D", "E"] 
      code (data-trim class="ruby")
        |
          dato_tid = DateTime.parse("1/2/2013 3:00:00 PM")
          dato_tid.hour
           => 15


section
  section
    h1 Dag 3 - HTML og Web

    p
      |
        Vi kikker litt på HTML og på hvordan en hjemmeside fungerer

  section
    h2 Kidsbook...
    p
      |
        I løpet av de siste tre dagene skal vi bygge en hjemmeside med Ruby.
        Når vi er ferdige har vi bygd en veldig enkel Facebook lignende side
        hvor man kan legge inn innlegg.

  section
    h2 HTML
    p
      |
        HTML er det språket som man beskriver en web side med.

    p.fragment
      |
        HTML er ikke et programmeringsspråk, men en måte å beskrive en web side
        på. Sånn sett ligner HTML mer på YAML enn på Ruby.

  section
    pre
      code (data-trim class="html")
        |
          &lt;!DOCTYPE html>
          &lt;html>
            &lt;head>
              &lt;title>Hallo!&lt;/title>
              &lt;meta charset="UTF-8"> 
            &lt;/head>
            &lt;body>
              &lt;p>Hallo verden!&lt;/p>
            &lt;/body>
          &lt;/html>
    p.fragment
      |
        Prøv å skrive inn dette i en tekstfil som du kaller `hello.html`. Åpne
        filen i nettleseren din (Firefox, Safari, Chrome, Internet Explorer)
  
  section
    p
      |
        I HTML har vi `tagger` som åpner og som lukker. De opptrer parvis slik
        som dette:

    p 
      code (data-trim class="html")
        |
          &lt;div>   &lt;/div>

    p
      |
        Hva slags tag vi lager bestemmer hva som blir skrevet i browseren.
        `div` taggen gjør ingenting annet enn å gruppere andre tagger og tekst.

  section
    p
      |
        HTML bryr seg ikke om mellomrom og linjeskift. Dette

    pre
      code (data-trim class="html")
        |
          <p>P taggen inneholder vanligvis et avsnitt med tekst</p>

    p er likt med dette:

    pre
      code (data-trim class="html")
        |
          <p>
            P taggen inneholder 
            vanligvis       et avsnitt med 
            tekst
          </p>

  section
    p
      |
        En HTML fil deles opp opp i `head` og `body`. Body inneholder alt som
        blir vist på siden. Head inneholder tittelen som vises øverst i
        nettleseren, og spesielle tagger.

    p Tabellen på neste side viser noen vanlige tagger
    
  section
    table
      tbody
        tr
          td: em heading 1
          td: code &lt;h1>
          td brukes til overskrifter
        tr
          td: em heading 2
          td: code &lt;h2>
          td brukes til overskrifter
        tr
          td: em heading 3
          td: code &lt;h3>
          td brukes til overskrifter
        tr
          td: em paragraph
          td: code  &lt;p>
          td inneholder et avsnitt med tekst
        tr
          td: em division
          td: code &lt;div>
          td gruppering
        tr
          td: em anchor
          td: code &lt;a&nbsp;href="...">
          td en lenke til noe annet
        tr
          td: em image
          td: code &lt;img&nbsp;src="...">
          td bilder


  section
    h2 Bilder
    p Du kan sette inn et bilde fra en komplett adresse (URL) slik

    pre
      code (data-trim class="html")
        |
          &lt;img src="http://goo.gl/TZjd4Q">&lt;/img>

    p eller du kan hente bildet fra samme sted

    pre
      code (data-trim class="html")
        |
          &lt;img src="kidsbook_logo.png">&lt;/img>

    p HTML filen og bildet må ligge i samme katalog

  section
    h2 Hyperlenker
    p Lenker til komplette adresser lages slik
    pre
      code (data-trim class="html")
        |
          &lt;a href="http://www.duckduckgo.com">trykk her for å søke&lt;/a>

    p eller du kan hoppe til en annen side fra fra samme sted

    pre
      code (data-trim class="html")
        |
          &lt;a href="andre.html">her er den andre siden min&lt;/a>
  
  section
    h2 Oppgave: Lag et utkast til din Kidsbook

    p Lag en side som skal bli Kidsbook. Siden skal ha:

    ul
      li tittelen skal være `Kidsbook`
      li en overskrift, `Siste innlegg`
      li fire innlegg med en tekst du bestemmer
      li hvert innlegg skal ha navnet på avsender
      li 
        a href="http://goo.gl/TZjd4Q" Kidsbook logoen 
        | lagret i samme katalog som HTML filen
      li øverst på siden en lenke til `login` siden som vi lager senere

    p 
      br/
      | Vent lengst mulig med å kikke på 
      a href="http://github.com/tallakt/kidsakoder_kidsbook/tree/master/kode/dag_3/kidsbook_1.html"
        | løsningsforslaget


  section
    p
    h2 CSS
    p 
      |
        Web siden vi laget ser litt kjedelig ut. Mens teksten på en web side er
        bestemt av HTML kodene, er utseendet bestemt av CSS filen

  
  section
    pre
      code (data-trim class="css")
        |
          body {
            background-color: #bde7ee;
          }

          p.innlegg-tekst {
            margin-top: 50px;
          }

          p.avsender {
            color: #999;
          }
    p.fragment
      |
        Vi kommer ikke til å gå så mye inn på CSS her, så vi skriver av denne
        teksten og lagrer som `kidsbook.css`

  section
    p
      |
        Neste steg er å koble HTML filen sammen med CSS filen. Det ser omtrent sånn ut

    pre
      code (data-trim class="html")
        |
           &lt;head>
             &lt;title>Kidsbook&lt;/title>
             &lt;link rel="stylesheet" type="text/css" href="kidsbook.css">
           &lt;/head>

  section
    p
      |
        For at valgene i CSS filen skal tre i kraft må de matche med tagger i HTML filen. Stilen
    pre
      code (data-trim class="css")
        |
          p.avsender {
            color: #999;
          }
    p
      |
        vil matche med denne HTML taggen:

    pre
      code (data-trim class="html")
        |
          &lt;p class="avsender">Hilsen Doffen&lt;/a>
    p
      |
        Resultatet vil være at avsnittet blir lysegrått, som fargekoden #999 angir.


  section
    h2 Oppgave: vi legger til litt stil

    p
      |
        For siden vi laget først skal vi bruke CSS filen. Gjør slik av både
        innlegg og avsendere er påvirket av CSS stilene.  
      a href="http://github.com/tallakt/kidsakoder_kidsbook/tree/master/kode/dag_3/kidsbook_2.html"
        | Løsningsforslag
      | .
  
  section
    h2 Pålogginagsskjema
    p 
      |
        Vi skal lage en HTML fil nummer to hvor man får mulighet til å logge
        seg inn.  
    p
      |
        Vi gjør det veldig enkelt med en boks hvor man skiver inn navnet sitt,
        og en knapp for å bekrefte


  section
    p 
      | Her er noen tagger vi kan bruke


    table
      tbody
        tr
          td: code &lt;form>
          td omslutter alle elementer i ett skjema
        tr
          td: code &lt;textarea>
          td en stor boks for tekst
        tr
          td: code &lt;input type="text">
          td en liten boks for tekst
        tr
          td: code &lt;input&nbsp;type="submit">
          td knappen for å sende inn skjemaet



  section
    p
      |
        Et enkelt skjema for innlogging ser da omtrent sånn ut

    pre
      code (data-trim class="html")
        | 
          &lt;form method="POST" action="/behandle-login">
            &lt;p>
              &lt;input type="text" name="avsender">&lt;/input>
            &lt;/p>
         
            &lt;p>
             &lt;input type="submit" value="Logg inn" />
            &lt;/p>
          &lt;/form>

  section
    pre
      code (data-trim class="html")
        | 
          &lt;form method="POST" action="/behandle-login">
            &lt;p>
              &lt;input type="text" name="avsender">&lt;/input>
            &lt;/p>
         
            &lt;p>
             &lt;input type="submit" value="Logg inn" />
            &lt;/p>
          &lt;/form>

    p
      |
        I dette skjemaet oppgir vi at aksjonen når vi trykker på knappen skal
        være `behandle-login`. Tenk at det er som

    pre
      code (data-trim class="html")
        | 
          &lt;a href="/behandle-login">

    p men som gjelder for skjemaer

  section
    pre
      code (data-trim class="html")
        | 
          &lt;form method="POST" action="/behandle-login">
            &lt;p>
              &lt;input type="text" name="avsender">&lt;/input>
            &lt;/p>
         
            &lt;p>
             &lt;input type="submit" value="Logg inn" />
            &lt;/p>
          &lt;/form>

    p
      |
        Navnet `avsender` trenger vi når vi senere mottar dataene fra skjemaet


  section
    h2 Oppgave: innloggingssiden
    p 
      |
        Lag en html fil for pålogging. Sjekk at lenken fra hovedsiden fungerer. 
      a href="http://github.com/tallakt/kidsakoder_kidsbook/tree/master/kode/dag_3/login.html"
        | Løsningsforslag her
      | .




  section
    h2 Web serveren

    p
      |
        Filene som ligger på din datamaskin vil ikke være tilgjengelige for
        andre maskiner. Vi trenger en web server for å gjøre dette
  
  section
    p 
      |
        Vi skal bruke Sinatra som web server. Sinatra er et system som brukes
        av mange profesjonelle kodere.

    p
      |
        Før vi kan bruke Sinatra skal det installeres. Åpne et kommandovindu og skriv:

    pre
      code (data-trim class="sh")
        | $ gem install sinatra

    p PS: $ tegnet skal ikke skrives


  section
    p
      |
        Det neste vi skal gjøre er å lage følgende mappestruktur:

    pre
      |
        ├── data_til_fil.rb
        ├── kidsbook.rb
        ├── public
        │   ├── kidsbook.html
        │   ├── login.html
        │   ├── kidsbook.css
        │   └── kidsbook_logo.png
        └── views
            └── (foreløpig tomt)

  section
    p Filen `kidsbook.rb` skal være hovedfilen vår. Vi oppretter den med innholdet:

    pre
      code (data-trim class="ruby")
        |
          require 'sinatra'

    p 
      | Hvis du nå kjører scriptet starter web serven. Du kan koble til siden din på adressen 
      a href="http://localhost:4567/kidsbook.html"
        | http://localhost:4567/kidsbook.html

  section
    p
      a href="http://localhost:4567/kidsbook.html"
        | http://localhost:4567/kidsbook.html

    p
      |
        Vi sier her at vi kjører mot vår egen maskin på port 4567. Når vi
        erstatter `localhost` med din ip adresse kan man lese siden fra en
        annen maskin.

  section
    h2 Dynamiske web sider

    p Sinatra serveren kan gjøre mer enn å gi ut filer fra disken. La oss lage en side med tilfeldige tall.

  section
    p 
      |
        Modifiser `kidsbook.rb` filen slik, og restart serveren. Du må
        trykke Ctrl+C for å avslutte den som allerede kjører.

    pre
      code (data-trim class="ruby")
        |
          require 'sinatra'

          get '/tilfeldig' do
            tall = rand(0..9999)
            tall.to_s             # vi må alltid gi tilbake en streng
          end

    p
      | Se hva som skjer når du går inn på 
      a href="http://localhost:4567/tilfeldig"
        | http://localhost:4567/tilfeldig


  section
    h2 Oppgaver
    p Ingen oppgaver. Lek med HTML og CSS
